title="Bargraph",
plotOutput("graceplot")
)
)
)
server <- function(input,output){
output$graceplot <- renderPlot({
barplot(occupation_by_gender, beside = TRUE, col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
xlab = "Gender", ylab = "Frequency",
legend = rownames(occupation_by_gender))
})
}
server <- function(input,output){
output$graceplot <- renderPlot({
barplot(occupation_by_gender, beside = TRUE, col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
xlab = "Gender", ylab = "Frequency",
legend = rownames(occupation_by_gender))
})
}
shinyApp(ui, server)
ui<- dashboardPage(
dashboardHeader(title = "My Sleep health Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Home", tabName = "home")
)
),
dashboardBody(
box(
title="Bargraph",
plotOutput("graceplot"), width= 10
)
)
)
server <- function(input,output){
output$graceplot <- renderPlot({
barplot(occupation_by_gender, beside = TRUE, col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
xlab = "Gender", ylab = "Frequency",
legend = rownames(occupation_by_gender))
})
}
shinyApp(ui, server)
?table
?table()
?table()
print(occupation_by_gender)
barplot(occupation_by_gender, beside = TRUE, col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
xlab = "Gender", ylab = "Frequency",
legend = rownames(occupation_by_gender))
barplot(occupation_by_gender, beside = TRUE, col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
ylab = "Gender", xlab = "Frequency"))
barplot(occupation_by_gender, beside = TRUE, col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
ylab = "Gender", xlab = "Frequency")
barplot(occupation_by_gender, beside = TRUE, col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
xlab = "Frequency", ylab = "Gender")
barplot(occupation_by_gender, beside = TRUE, col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
xlab = "Frequency", ylab = "Gender")
barplot(occupation_by_gender, col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
xlab = "Frequency", ylab = "Gender")
?barplot
barplot(Sleep_health_and_lifestyle_dataset$Stress.Level,Sleep_health_and_lifestyle_dataset$Gender,
col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
xlab = "Frequency", ylab = "Gender")
plot(Sleep_health_and_lifestyle_dataset$Stress.Level,Sleep_health_and_lifestyle_dataset$Gender,
col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
xlab = "Frequency", ylab = "Gender")
average_steps
barplot(occupation_by_gender, beside = TRUE, col = c("#178866", "#555666"),
main = "Frequency of Gender and Occupation",
xlab = "Gender", ylab = "Frequency",
legend = rownames(occupation_by_gender))
ui<- dashboardPage(
dashboardHeader(title = "My Sleep health Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Home", tabName = "home")
)
),
dashboardBody(
box(
title="Bargraph",
plotOutput("graceplot"), width= 10
)
)
)
dashboardBody(
box(
title="Bargraph",
plotOutput("graceplot"), width= 10
)
)
ui<- dashboardPage(
dashboardHeader(title = "My Sleep health Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Home", tabName = "home")
)
),
dashboardBody(
box(
title="Bargraph",
plotOutput("graceplot"), width= 10
)
)
)
library(shinydashboard)
ui<- dashboardPage(
dashboardHeader(title = "My Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Home", tabName = "home")
)
),
dashboardBody(
box(
title="Bargraph",
plotOutput("graceplot"), width= 10
)
)
)
ui<- dashboardPage(
dashboardHeader(title = "My Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Home", tabName = "home")
)
),
dashboardBody(
box(
title="Bargraph",
plotOutput("graceplot"), width= 10
)
)
)
library(shiny); runApp('myFirstShiny.R')
occupation_by_gender <- table(occupation_stress$Occupation,occupation_stress$Gender)
print(occupation_by_gender)
occupation_by_gender <- table(occupation_stress$Gender, occupation_stress$Occupation)
print(occupation_by_gender)
occupation_by_gender <- table(occupation_stress$Occupation,occupation_stress$Gender)
print(occupation_by_gender)
runApp('myFirstShiny.R')
new_sleep_disorder
average_sleepDisorder_by_Occupation
barplot(average_sleepDisorder_by_Occupation)
counts_occupation <- table(occupation_stress$Occupation)
counts_occupation
total_Occ_Counts <- sum(counts_occupation)
total_Occ_Counts
weighted.mean(counts_occupation)
weight <- total_Occ_Counts/counts_occupation
weight
barplot(weight)
occupation_weight <- total_Occ_Counts/counts_occupation
barplot(occupation_weight)
install.packages("git2r")
library(git2r)
install.packages("gh")
library(gh)
gh::gh_auth()
library(gh)
library(git2r)
git_config_files()
library(gitcreds)
git config -- global user.Name "Grace-chukwu"
library(shiny); runApp('myFirstShiny.R')
print(occupation_by_gender)
Sleep_health_and_lifestyle_dataset
barplot(average_sleepDisorder_by_Occupation)
barplot(average_sleepDisorder_by_Occupation)
total_phy_activities
total_phy_activities <- tapply(Sleep_health_and_lifestyle_dataset$`Physical Activity Level`,Sleep_health_and_lifestyle_dataset$Gender,sum)
average_steps <-tapply(Sleep_health_and_lifestyle_dataset$`Daily Steps`,Sleep_health_and_lifestyle_dataset$Gender,mean)
average_steps <-tapply(Sleep_health_and_lifestyle_dataset$`Daily Steps`,Sleep_health_and_lifestyle_dataset$Gender,mean)
library(dplyr)
library(tidyverse)
#the class and structure of the dataset
class(Sleep_health_and_lifestyle_dataset)
str(Sleep_health_and_lifestyle_dataset)
# Replace Normal weight in the BMI column with Normal
Sleep_health_and_lifestyle_dataset$`BMI Category` <- gsub("Normal weight", "Normal",
Sleep_health_and_lifestyle_dataset$`BMI Category`, ignore.case = TRUE)
if (average_steps ["Male"] > average_steps["Female"]) {
steps_winner <- "Male"
} else {
steps_winner <- "Female"
}
if (total_phy_activities["Male"] > total_phy_activities["Female"]) {
activities_winner <- "Male"
} else {
activities_winner <- "Female"
}
?if
?if()
?if
?sum()
?git
?github
?gh
?class
?if
if else
ifelse
?ifesle
if
cat("Gender with average  daily steps", steps_winner, "\n")
if (average_steps ["Male"] > average_steps["Female"]) {
steps_winner <- "Male"
} else {
steps_winner <- "Female"
}
if (total_phy_activities["Male"] > total_phy_activities["Female"]) {
activities_winner <- "Male"
} else {
activities_winner <- "Female"
}
average_steps <-tapply(Sleep_health_and_lifestyle_dataset$`Daily Steps`,Sleep_health_and_lifestyle_dataset$Gender,mean)
Sleep_health_and_lifestyle_dataset$`BMI Category` <- gsub("Normal weight", "Normal",
Sleep_health_and_lifestyle_dataset$`BMI Category`, ignore.case = TRUE)
Sleep_health_and_lifestyle_dataset$Occupation
occupation_stress
occupation_by_gender
Sleep_health_and_lifestyle_dataset$`BMI Category`
Sleep_health_and_lifestyle_dataset
average_steps
total_phy_activities
average_steps <-tapply(Sleep_health_and_lifestyle_dataset$`Daily Steps`,Sleep_health_and_lifestyle_dataset$Gender,mean)
cat("Gender with more physical Activities", total_phy_activities)
cat("Gender with average  daily steps", steps_winner, "\n")
new_sleep_disorder
barplot(occupation_weight)
average_sleepDisorder_by_age <- tapply(Sleep_health_and_lifestyle_dataset$Age,
Sleep_health_and_lifestyle_dataset$Sleep.Disorde, mean)
average_sleepDisorder_by_age
average_sleepDisorder_by_age
barplot(average_sleepDisorder_by_age)
average_sleepDisorder_by_age <- tapply(Sleep_health_and_lifestyle_dataset$Age,
Sleep_health_and_lifestyle_dataset$Sleep.Disorder, mean)
barplot(average_sleepDisorder_by_age)
runApp('myFirstShiny.R')
?dashboardPage
?dashboardSidebar
?dashboardBody
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
categories <- c("Category A", "Category B", "Category C")
values <- c(10, 20, 15)
# Create a bar plot
barplot(values, names.arg = categories, main = "Column Bar Chart", xlab = "Categories", ylab = "Values")
library(ggplot2)
# Sample data
data <- data.frame(
Category = c("Category A", "Category B", "Category C"),
Value1 = c(10, 20, 15),
Value2 = c(15, 25, 18),
Value3 = c(8, 12, 10)
)
# Convert data from wide to long format
library(tidyr)
data_long <- gather(data, key = "Variable", value = "Value", -Category)
# Create a vertical bar chart using ggplot2
ggplot(data_long, aes(x = Category, y = Value, fill = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Vertical Bar Chart of Multiple Variables", x = "Categories", y = "Values") +
theme_minimal() +
scale_fill_brewer(palette = "Set1")  # Use a color palette
data <- data.frame(
Category = c("Category A", "Category B", "Category C"),
Value1 = c(10, 20, 15),
Value2 = c(15, 25, 18),
Value3 = c(8, 12, 10)
)
# Convert data from wide to long format
library(tidyr)
data_long <- gather(data, key = "Variable", value = "Value", -Category)
# Create a stacked vertical bar chart using ggplot2
ggplot(data_long, aes(x = Category, y = Value, fill = Variable)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Vertical Bar Chart of Multiple Variables", x = "Categories", y = "Values") +
theme_minimal() +
scale_fill_brewer(palette = "Set3")  # Use a color palette
library(tidyr)
?gather
occupation_by_gender
occupation_stress
long_data <- gather(occupation_stress,key="variable", value = "value", -Gender)
#####
ggplot(long_data, aes(x=Occupation, y=Gender)) + geom_bar(stat = "identity")+
labs(title = "A column Chart  occupation", x= "occupation", y="frequency" )+
theme_minimal() +
scale_fill_brewer(palette = "Set3")  # Use a color palette
long_data <- gather(occupation_stress,key="variable", value = "value", -Gender)
#####
ggplot(long_data, aes(x= occupation, y=Gender)) + geom_bar(stat = "identity")+
labs(title = "A column Chart  occupation", x= "occupation", y="frequency" )+
theme_minimal() +
scale_fill_brewer(palette = "Set3")  # Use a color palette
frequency_table <- data.frame(
Category = c("Category A", "Category B", "Category C"),
Value1 = c(10, 20, 15),
Value2 = c(15, 25, 18),
Value3 = c(8, 12, 10)
)
frequency_table
(occupation_by_gender)
occupation_by_gender <- table(Sleep_health_and_lifestyle_dataset$Occupation,occupation_stress$Gender)
print(occupation_by_gender
print(occupation_by_gender)
occupation_by_gender
long_data <- gather(occupation_by_gender,key="variable", value = "value", -Gender)
ggplot(occupation_by_gender, aes(x= Occupation, y=Gender)) + geom_bar(stat = "identity")+
labs(title = "A column Chart  occupation", x= "occupation", y="frequency" )+
theme_minimal() +
scale_fill_brewer(palette = "Set3")  # Use a color palette
library(ggplot2)
ggplot(occupation_by_gender, aes(x= Occupation, y=Gender)) + geom_bar(stat = "identity")+
labs(title = "A column Chart  occupation", x= "occupation", y="frequency" )+
theme_minimal() +
scale_fill_brewer(palette = "Set3")  # Use a color palette
occupation_by_gender <- data.frame(Occupation=Sleep_health_and_lifestyle_dataset$Occupation,
c(Sleep_health_and_lifestyle_dataset$Gender))
occupation_by_gender
frequency_table <- sleep %>%
group_by(gender, occupation) %>%
summarize(count = n()) %>%
ungroup()
# Create a frequency distribution table
Occupation_frequency_table <- Sleep_health_and_lifestyle_dataset %>%
group_by(Gender, Occupation) %>%
summarize(count = n()) %>%
ungroup()
# Convert frequency table to long format
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -gender, -occupation)
# Create a frequency distribution table
Occupation_frequency_table <- Sleep_health_and_lifestyle_dataset %>%
group_by(Gender, Occupation) %>%
summarize(count = n()) %>%
ungroup()
# Convert frequency table to long format
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -gender, -occupation)
# Create a frequency distribution table
Occupation_frequency_table <- Sleep_health_and_lifestyle_dataset %>%
group_by(Gender, Occupation) %>%
summarize(count = n()) %>%
ungroup()
# Convert frequency table to long format
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -gender, -occupation)
# Create a frequency distribution table
Occupation_frequency_table <- Sleep_health_and_lifestyle_dataset %>%
group_by(Gender, Occupation) %>%
summarize(count = n()) %>%
ungroup()
# Convert frequency table to long format
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -Gender, -Occupation)
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value, fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = "Set3")  # Use a color palette
Occupation_frequency_table
Occupation_frequency_long
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -Gender, -Occupation)
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
col = c("#178866", "#555666")  # Use a color palette
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -Gender, -Occupation)
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +,
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = "#222")  # Use a color palette
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = "#226")  # Use a color palette
?palette
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = "okabe-ito")  # Use a color palette
?palette.colors
?scale_fill_brewer
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -Gender, -Occupation)
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = 1)  # Use a color palette
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -Gender, -Occupation)
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = 6)  # Use a color palette
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -Gender, -Occupation)
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = 66)  # Use a color palette
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -Gender, -Occupation)
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = 0)  # Use a color palette
Occupation_frequency_long <- gather(Occupation_frequency_table, key = "Variable", value = "Value", -Gender, -Occupation)
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = 4)  # Use a color palette
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = 7)  # Use a color palette
# Create a stacked column chart using ggplot2
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = 8)
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = 76)
ggplot(Occupation_frequency_long, aes(x = Occupation, y = Value,fill = Gender)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Column Chart of Frequency Distribution", x = "Occupation", y = "Count") +
theme_minimal() +
scale_fill_brewer(palette = 1)
runApp('myFirstShiny.R')
?dashboardSidebar
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
Sleep_health_and_lifestyle_dataset)
Sleep_health_and_lifestyle_dataset
Sleep_health_and_lifestyle_dataset
occupation_stress
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
average_steps
runApp('myFirstShiny.R')
?ggplot
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
runApp('myFirstShiny.R')
